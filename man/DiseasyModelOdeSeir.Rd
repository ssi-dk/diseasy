% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DiseasyModelOdeSeir.R
\name{DiseasyModelOdeSeir}
\alias{DiseasyModelOdeSeir}
\title{A flexible SEIR model template}
\value{
A new instance of the \code{DiseasyModelOdeSeir} \link[R6:R6Class]{R6} class.
}
\description{
This class provides a \code{diseasy} model-template for a compartmental SEIR ordinary differential equation model.
The number of consecutive exposed, infectious, and recovered compartments can flexibly be specified to generate a
number of structurally different SEIR models.

Similarly, the number of age groups in the model can also be controlled to create structurally different models.

The model implements the following features:
\itemize{
\item A scaling of infection risk based on season (via \code{DiseasySeason})
\item Contact matrices and activity scenarios (via \code{DiseasyActivity})
\item Waning of immunity (via \code{DiseasyImmunity})
\item Asymmetric cross-immunity interactions between variants (via \code{DiseasyVariant})
}

See \code{vignette(diseasy-model-ode-seir)} for a detailed examples of how to use this model.
}
\examples{
\dontshow{if (rlang::is_installed(c("duckdb", "deSolve")) && (Sys.info()["sysname"] != "Darwin")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
  # The model can be instantiated almost without arguments, but
  # to illustrate its use, we configure a simple model:

  # First, we add a observables modules with example data bundled
  # with the package.
  obs <- DiseasyObservables$new(
    diseasystore = DiseasystoreSeirExample,
    conn = DBI::dbConnect(duckdb::duckdb())
  )

  # The observables module also defines the time if interest via
  # the `last_queryable_date` field. Data before this date are
  # used to train the models, and predictions start on this date.
  obs$set_last_queryable_date(as.Date("2020-02-29"))

  # The example data uses a simple activity scenario for Denmark,
  # which we replicate here
  act <- DiseasyActivity$new(contact_basis = contact_basis$DK)
  act$set_activity_units(dk_activity_units)
  act$change_activity(date = as.Date("2020-01-01"), opening = "baseline")

  # We create a default instance which has:
  # * 1 age group (0+)
  # * 1 variant
  # * No season scaling
  # * No activity scenarios
  m <- DiseasyModelOdeSeir$new(
    observables = obs,
    activity = act,
    disease_progression_rates = c("E" = 1 / 2, "I" = 1 / 4),
    parameters = list("overall_infection_risk" = 0.025)
  )

  # We need the initial state for the system, which we infer from
  # the incidence data (see `vignette("SEIR-initialisation")`).
  # We compute this here from the example data which uses a 65 \%
  # change of testing when infected
  incidence_data <- m$observables$get_observation(
    observable = "n_positive",
    start_date = obs$ds$min_start_date,
    end_date = m$training_period$end
  ) |>
    dplyr::mutate(
      "incidence" = .data$n_positive / (sum(act$contact_basis$population) * 0.65)
    )

  psi <- m$initialise_state_vector(incidence_data)

  # The model now has a configured right-hand-side function that
  # can be used to simulate the model in conjunction with deSolve.
  sol <- deSolve::ode(
    y = psi$initial_condition,
    times = seq(from = 0, to = 100, by = 1),
    func = m$rhs
  )

  # Extract the incidence outcome from the solution
  time <- sol[, 1]
  model_incidence <- sol[, 3] * m$disease_progression_rates[["I"]]

  plot(
    x = time + m$training_period$end,
    y = model_incidence,
    col = "red",
    lty = 2,
    xlim = c(as.Date("2020-01-01"), m$training_period$end + max(time)),
    xlab = "Date",
    ylab = "Incidence"
  )
  points(incidence_data$date, incidence_data$incidence, col = "black")

  legend(
    x = "topright",
    legend = c("Model", "Data"),
    col = c("red", "black"),
    lty = c(2, 1)
  )

  rm(m, obs)
\dontshow{\}) # examplesIf}
}
\keyword{model-template}
\section{Super classes}{
\code{\link[diseasy:DiseasyBaseModule]{diseasy::DiseasyBaseModule}} -> \code{\link[diseasy:DiseasyModel]{diseasy::DiseasyModel}} -> \code{DiseasyModelOdeSeir}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{immunity}}{(\code{diseasy::DiseasyImmunity})\cr
Place holder for the immunity module}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{compartment_structure}}{(\verb{named integer()})\cr The structure of the compartments in the model. The names should be \code{E}, \code{I}, and \code{R} for the exposed, infectious, and recovered compartments, respectively.  Read only.}

\item{\code{disease_progression_rates}}{(\verb{named numeric()})\cr The overall progression rates for the disease states. The reciprocal of each rate is the average time spent in the all of the corresponding compartments.  Read only.}

\item{\code{malthusian_scaling_factor}}{(\code{numeric(1)})\cr
A scaling factor to apply to the contact matrices to account for structural differences
in the model. Read only.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DiseasyModelOdeSeir-new}{\code{DiseasyModelOdeSeir$new()}}
\item \href{#method-DiseasyModelOdeSeir-set_forcing_functions}{\code{DiseasyModelOdeSeir$set_forcing_functions()}}
\item \href{#method-DiseasyModelOdeSeir-malthusian_growth_rate}{\code{DiseasyModelOdeSeir$malthusian_growth_rate()}}
\item \href{#method-DiseasyModelOdeSeir-initialise_state_vector}{\code{DiseasyModelOdeSeir$initialise_state_vector()}}
\item \href{#method-DiseasyModelOdeSeir-rhs}{\code{DiseasyModelOdeSeir$rhs()}}
\item \href{#method-DiseasyModelOdeSeir-clone}{\code{DiseasyModelOdeSeir$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="diseasy" data-topic="DiseasyBaseModule" data-id="finalize"><a href='../../diseasy/html/DiseasyBaseModule.html#method-DiseasyBaseModule-finalize'><code>diseasy::DiseasyBaseModule$finalize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="diseasy" data-topic="DiseasyBaseModule" data-id="load_module"><a href='../../diseasy/html/DiseasyBaseModule.html#method-DiseasyBaseModule-load_module'><code>diseasy::DiseasyBaseModule$load_module()</code></a></span></li>
<li><span class="pkg-link" data-pkg="diseasy" data-topic="DiseasyBaseModule" data-id="set_moduleowner"><a href='../../diseasy/html/DiseasyBaseModule.html#method-DiseasyBaseModule-set_moduleowner'><code>diseasy::DiseasyBaseModule$set_moduleowner()</code></a></span></li>
<li><span class="pkg-link" data-pkg="diseasy" data-topic="DiseasyModel" data-id="get_data"><a href='../../diseasy/html/DiseasyModel.html#method-DiseasyModel-get_data'><code>diseasy::DiseasyModel$get_data()</code></a></span></li>
<li><span class="pkg-link" data-pkg="diseasy" data-topic="DiseasyModel" data-id="get_results"><a href='../../diseasy/html/DiseasyModel.html#method-DiseasyModel-get_results'><code>diseasy::DiseasyModel$get_results()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiseasyModelOdeSeir-new"></a>}}
\if{latex}{\out{\hypertarget{method-DiseasyModelOdeSeir-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of the \code{DiseasyModelOdeSeir} \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiseasyModelOdeSeir$new(
  compartment_structure = c(E = 1L, I = 1L, R = 1L),
  disease_progression_rates = c(E = 1, I = 1),
  malthusian_matching = TRUE,
  activity = TRUE,
  season = TRUE,
  variant = TRUE,
  parameters = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{compartment_structure}}{(\verb{named integer()})\cr The structure of the compartments in the model. The names should be \code{E}, \code{I}, and \code{R} for the exposed, infectious, and recovered compartments, respectively. The exposed compartments can optionally be omitted.}

\item{\code{disease_progression_rates}}{(\verb{named numeric()})\cr The overall progression rates for the disease states. The reciprocal of each rate is the average time spent in the all of the corresponding compartments. The exposed compartments can optionally be omitted.}

\item{\code{malthusian_matching}}{(\code{logical(1)})\cr
Should the model be scaled such the Malthusian growth rate marches the corresponding SIR model?}

\item{\code{activity, season, variant}}{(\code{boolean} or \verb{R6::R6Class instance})\cr If a boolean is given, it dictates whether to load a new instance module of this class.\cr If an instance of the module is provided instead, a copy of this instance is added to the \code{DiseasyModel} instance. This copy is a "clone" of the instance at the time it is added and any subsequent changes to the instance will not reflect in the copy that is added to \code{DiseasyModel}.}

\item{\code{parameters}}{(\verb{named list()})\cr
List of parameters to set for the model during initialization.

Parameters controlling the structure of the model:
\itemize{
\item \code{age_cuts_lower} - Determines the age groups in the model.
}

Parameters controlling the dynamics of the model:
(Can be inferred from observational data via initialisation routines)
\itemize{
\item \code{overall_infection_risk} - A scalar that scales contact rates to infection rates.
}

Parameters controlling initialisation routines
\itemize{
\item \code{incidence_polynomial_order} - The degree of the polynomial to fit to the incidence curves.
}

Parameters controlling the functional modules:
\itemize{
\item \code{activity.weights} - passed to \code{DiseasyActivity$get_scenario_contacts(..., weights = activity.weights)}
\item \code{immunity.method} - passed to \code{DiseasyImmunity$approximate_compartmental(method = immunity.method, ...)}
}

Additional parameters are:
\itemize{
\item \code{training_length} (\verb{named numeric})\cr   The number of days that should be included in the training splits of the data for the model.   Allowed splits are: "training", "testing", and "validation".
}}

\item{\code{...}}{Parameters sent to \code{DiseasyModel} \link[R6:R6Class]{R6} constructor.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiseasyModelOdeSeir-set_forcing_functions"></a>}}
\if{latex}{\out{\hypertarget{method-DiseasyModelOdeSeir-set_forcing_functions}{}}}
\subsection{Method \code{set_forcing_functions()}}{
Set the forcing functions for the model.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiseasyModelOdeSeir$set_forcing_functions(
  infected_forcing = NULL,
  state_vector_forcing = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{infected_forcing}}{(\code{function})\cr
A function that takes arguments \code{t} and \code{infected} and modifies the number of infected at time \code{t}.}

\item{\code{state_vector_forcing}}{(\code{function})\cr
A function that takes arguments \code{t} and\code{dy_dt} and modifies the flow into the
compartments at time \code{t}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} (called for side effects)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiseasyModelOdeSeir-malthusian_growth_rate"></a>}}
\if{latex}{\out{\hypertarget{method-DiseasyModelOdeSeir-malthusian_growth_rate}{}}}
\subsection{Method \code{malthusian_growth_rate()}}{
This function computes the Malthusian growth rate for the given model configuration.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiseasyModelOdeSeir$malthusian_growth_rate(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to \verb{$generator_matrix()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This section follows the method outlined in doi: 10.1098/rsif.2009.0386
To compute the scaling, we need to compute the Jacobian matrix of the linearised system.
Here, we linearise around S = 1.
In this limit, there is no interaction with variants (since everyone is susceptible).
The Malthusian growth rate is therefore not dependent on factors such as cross-immunity.
}

\subsection{Returns}{
(\code{numeric(1)})\cr
The Malthusian growth rate for the model.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiseasyModelOdeSeir-initialise_state_vector"></a>}}
\if{latex}{\out{\hypertarget{method-DiseasyModelOdeSeir-initialise_state_vector}{}}}
\subsection{Method \code{initialise_state_vector()}}{
Infer the state_vector from incidence data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiseasyModelOdeSeir$initialise_state_vector(
  incidence_data,
  overall_infection_risk = self \%.\% parameters \%.\% overall_infection_risk,
  ei_rs_balance = 1,
  method = c("derivative", "eigen-value")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{incidence_data}}{(\code{data.frame})\cr
Incidence observations as a \code{data.frame} with columns
\itemize{
\item \code{date}: The date of the observations
\item \code{age_group}: The age group of the incidence observation (following \code{diseasystore::age_labels()} format)
\item \code{variant}: The variant of the incidence observation.
\item \code{incidence}: The incidence in the age group at the given date
}}

\item{\code{overall_infection_risk}}{(\code{numeric})\cr The overall multiplier for the infection risk for the model.}

\item{\code{ei_rs_balance}}{(\code{numeric(1)})\cr
Which estimate should be priorities when normalising? See details.}

\item{\code{method}}{(\code{character(1)})\cr
The method to use for initialising the state vector.
\itemize{
\item \code{derivative}: Directly infers the EI compartments from derivatives of the incidence signal.
\item \code{eigen-value}: Uses the eigenvalues of the generator matrix to infer the state vector.
}

See the article \code{SEIR-initialisation} in the online documentation for more information.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
The inference of the state_vector from incidence data is two-fold: EI states are inferred with one method and
the RS states are inferred with another. The methods are described in detail in the initialisation article
\code{vignette("SEIR-initialisation")}.

When these estimates are combined, there is a degree of freedom in how to weight the estimates when
normalising the state vector. This is controlled by the \code{ei_rs_balance} parameter.
If \code{ei_rs_balance = 1}, the estimate for EI states are prioritised, and only the RS states are modified.
If \code{ei_rs_balance = 0}, the estimate for RS states are prioritised.
}

\subsection{Returns}{
(\code{numeric()})\cr
The initial state vector for the model (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiseasyModelOdeSeir-rhs"></a>}}
\if{latex}{\out{\hypertarget{method-DiseasyModelOdeSeir-rhs}{}}}
\subsection{Method \code{rhs()}}{
The vectorised right hand side (RHS) function of the system of differential equations
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiseasyModelOdeSeir$rhs(
  t,
  state_vector,
  parms = NULL,
  overall_infection_risk = self \%.\% parameters \%.\% overall_infection_risk
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{t}}{(\code{numeric(1)})\cr
The time to solve for.}

\item{\code{state_vector}}{(\code{numeric()})\cr
The state vector to compute the RHS from.}

\item{\code{parms}}{(\code{list})\cr
Argument to comply with \code{deSolve::ode} format. Not used.}

\item{\code{overall_infection_risk}}{(\code{numeric})\cr The overall multiplier for the infection risk for the model.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{numeric()})\cr
The rate of change for the differential equations.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiseasyModelOdeSeir-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DiseasyModelOdeSeir-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiseasyModelOdeSeir$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
